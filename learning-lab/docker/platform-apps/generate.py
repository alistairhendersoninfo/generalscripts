#!/usr/bin/env python3
"""Generate Docker Compose, Helm, and Nomad skeletons for extended lab apps."""
from __future__ import annotations

import re
import textwrap
from pathlib import Path

try:
    import yaml  # type: ignore
except ModuleNotFoundError as exc:  # pragma: no cover
    raise SystemExit("PyYAML is required: pip install pyyaml") from exc

ROOT = Path(__file__).resolve().parent
APPS_FILE = ROOT / "apps.yaml"
OUTPUT = ROOT / "generated"
DOCKER_DIR = OUTPUT / "docker"
HELM_DIR = OUTPUT / "helm"
NOMAD_DIR = OUTPUT / "nomad"

NETWORK_NAME = "learning-lab_lab"


def slugify(name: str) -> str:
    slug = re.sub(r"[^a-z0-9]+", "-", name.lower()).strip("-")
    return slug or "app"



def compose_content(app: dict) -> str:
    slug = slugify(app["name"])
    ports = app.get("ports") or []
    port_lines = "\n".join(
        f"      - \"{p}:{p}\"" for p in ports
    ) if ports else "      # expose ports as needed"
    notes = app.get("notes")
    notes_comment = f"# Notes: {notes}\n" if notes else ""
    env_hint = "      # TODO: define environment variables" if app.get("notes") else "      # optional environment overrides"
    return textwrap.dedent(
        f"""{notes_comment}services:
  {slug}:
    image: {app['image']}
    container_name: {slug}
    restart: unless-stopped
    ports:
{port_lines}
    environment:
{env_hint}
    networks:
      - lab

networks:
  lab:
    external: true
    name: {NETWORK_NAME}
"""
    ).strip() + "\n"


def helm_chart(app: dict) -> None:
    slug = slugify(app["name"])
    ports = app.get("ports") or []
    service_port = ports[0] if ports else 80
    chart_dir = HELM_DIR / slug
    (chart_dir / "templates").mkdir(parents=True, exist_ok=True)
    (chart_dir / "Chart.yaml").write_text(textwrap.dedent(
        f"""apiVersion: v2
name: {slug}
description: Autogenerated chart for {app['name']}
version: 0.1.0
appVersion: "1.0"
"""
    ))
    values = [f"image: {app['image']}"]
    values.append("service:")
    values.append(f"  port: {service_port}")
    values.append("resources: {}")
    (chart_dir / "values.yaml").write_text("\n".join(values) + "\n")
    deployment = textwrap.dedent(
        f"""apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{{{ include \"{slug}.fullname\" . }}}}
  labels:
    {{{{- include \"{slug}.labels\" . | nindent 4 }}}}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{{{- include \"{slug}.selectorLabels\" . | nindent 6 }}}}
  template:
    metadata:
      labels:
        {{{{- include \"{slug}.selectorLabels\" . | nindent 8 }}}}
    spec:
      containers:
        - name: app
          image: {{{{ .Values.image }}}}
          ports:
            - containerPort: {{{{ .Values.service.port }}}}
"""
    )
    service = textwrap.dedent(
        f"""apiVersion: v1
kind: Service
metadata:
  name: {{{{ include \"{slug}.fullname\" . }}}}
  labels:
    {{{{- include \"{slug}.labels\" . | nindent 4 }}}}
spec:
  type: ClusterIP
  ports:
    - port: {{{{ .Values.service.port }}}}
      targetPort: {{{{ .Values.service.port }}}}
      protocol: TCP
      name: http
  selector:
    {{{{- include \"{slug}.selectorLabels\" . | nindent 4 }}}}
"""
    )
    (chart_dir / "templates" / "deployment.yaml").write_text(deployment)
    (chart_dir / "templates" / "service.yaml").write_text(service)


def nomad_job(app: dict) -> str:
    slug = slugify(app["name"])
    ports = app.get("ports") or []
    port_blocks = []
    for idx, port in enumerate(ports or [80]):
        label = f"web{idx}" if idx else "web"
        block = f"port \"{label}\" {{\n  to = {port}\n}}"
        port_blocks.append(textwrap.indent(block, " " * 6))
    port_section = "\n".join(port_blocks) if port_blocks else "      # define ports as needed"
    return textwrap.dedent(
        f"""job "{slug}" {{
  datacenters = ["dc1"]
  type = "service"

  group "{slug}" {{
    network {{
{port_section}
    }}

    task "{slug}" {{
      driver = "docker"
      config {{
        image = "{app['image']}"
      }}
    }}
  }}
}}
"""
    )


def main() -> None:
    data = yaml.safe_load(APPS_FILE.read_text())
    apps = data.get("apps", [])
    DOCKER_DIR.mkdir(parents=True, exist_ok=True)
    HELM_DIR.mkdir(parents=True, exist_ok=True)
    NOMAD_DIR.mkdir(parents=True, exist_ok=True)

    for app in apps:
        slug = slugify(app["name"])
        compose_path = DOCKER_DIR / f"docker-compose.{slug}.yml"
        compose_path.write_text(compose_content(app))
        helm_chart(app)
        nomad_path = NOMAD_DIR / f"{slug}.nomad"
        nomad_path.write_text(nomad_job(app))

    print(f"Generated definitions for {len(apps)} apps in {OUTPUT}")


if __name__ == "__main__":
    main()
